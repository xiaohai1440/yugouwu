################################################################################
#%p:日志信息的优先级
#%d:日志的输出时间  比如 %d{yyyy-MM-dd hh:mm:ss}
#%c：输出日志信息的全类名
#%l:日志输出的位置，包含类名，线程和日志输出的行号
#%m:日志输出的信息(就是记录的东西（参数）)logger.debug(参数);
#%M：日志输出所在的方法
#%n:换行
#%r:从程序启动到输出日志信息，经历了多少毫秒
#%t:输出日志线程名称
########
#OFF  级别最高,用于关闭所有的日志记录
#FATAL 严重的错误会导致应用程序的退出
#ERROR 错误的时间但不影响系统继续运行
#WARN 会出现潜在错误的情形
#INFO 消息在粗粒度级别上突出强调应用程序的过程
#DEBUG 细粒度信息事件对调试应用程序非常有帮助
#TRACE 细粒度比DEBUG更低的信息事件
#ALL 级别最低，用于开启所有的日志记录
#生产环境时，建议把DEBUG改为WARN,避免产生大量文件


#日志的组成部分----> 01，日志记录器 02，日志的输出格式 03，日志的输出目的（控制台显示，或者记录在文件）
##############################################################################################
#相当于实例化一个类  ConsoleAppender//控制台
#ConsoleAppender console=new ConsoleAppender();
#调用log4j.appender 前缀一般不改变，指明是那个包的
#console只是一个变量名，随意起的


log4j.appender.console=org.apache.log4j.ConsoleAppender
#console.Target=System.out   对象名.属性=输出位置
log4j.appender.console.Target=System.out
#log4j.appender.console.Threshold=error 可以允许输出的级别的日志默认为 debug级别
#指定输出格式  console.Layout    抽象类
#Layout layout=new PatternLayout();实例化Layout的子类
log4j.appender.console.layout=org.apache.log4j.PatternLayout
#对象名.属性名    设置输出格式//====>setName  Name才是属性值
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss}   %l  %m  %n
##########################################################################################
#会根据文件大小创建新的文件
log4j.appender.file=org.apache.log4j.RollingFileAppender
#文件的存放位置
log4j.appender.file.File=log4j.log
#log4j.appender.file2.Threshold=error 默认是debug级别
#每个文件最大容量13kb(可以设置大小的)
log4j.appender.file.MaxFileSize=13Kb
#超出大小，默认产生额外的文件数量3
log4j.appender.file.MaxBackupIndex=3
#设置内容满了之后覆盖之前的内容true,默认为true
log4j.appender.file.Append=true
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{yyyy--MM--dd HH:mm:ss}   %l  %m  %n

####################################################################################
#每隔对局生成一个新文件,测试的东西都会记录在里面
log4j.appender.file2=org.apache.log4j.DailyRollingFileAppender
#设置内容满了之后覆盖之前的内容true
log4j.appender.file2.Append=true
#DatePattern可以指定6种时间方式 实现记录日志六个频度
#monthly(每月)、weekly(每周)、daily(每天)
#half-day(每半天)、hourly(每小时)、和minutely(每分钟)
#可以自己设置多久时间产生一个文件

#yyyy-MM-dd-mm'.log'  (.log必须被单引号引起来)
#log4j.appender.file2.DatePattern=yyyy-MM-dd-hh-mm'.log'

log4j.appender.file2.DatePattern='.'yyyy-MM-dd
#'.'yyyy-MM-dd控制一天生成一个log4jmeiTian.log日志文件记录内容;
log4j.appender.file2.File=log4jmeiTian.log
log4j.appender.file2.Threshold=debug
log4j.appender.file2.layout=org.apache.log4j.PatternLayout
log4j.appender.file2.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} %l %m %n

#设置日志的级别和输出目的地--->多个地方用,号隔开
log4j.rootLogger=debug,console,file2


